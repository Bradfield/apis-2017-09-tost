swagger: '2.0'
info:
  version: 0.0.1
  title: tost
  description: Edit and share documents online!
  license:
    name: MIT
    url: 'http://opensource.org/licenses/MIT'
schemes:
  https
securityDefinitions:
  apiKey:
    type: apiKey
    in: header
    name: TOST-API-KEY
paths:
  /signup:
    post:
      summary: create an account
      description: >-
        Create an account for the given email, on if the account does not
        already exist.
      operationId: signup
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Account creation parameters
          required: True
          schema:
            $ref: '#/definitions/UserCreate'
      security:
        - apiKey: []
      responses:
        "200":
          description: A user record
          schema:
            $ref: '#/definitions/UserRecord'
        "400":
          description: User already signed up
          schema:
            $ref: '#/definitions/Error'
        default:
          $ref: '#/responses/Default500ErrorResponse'
  /login:
    post:
      summary: user log-in
      description: TODO, need to learn more about security first
  /document:
    get:
      summary: lists documents
      description: >-
        Without any query parameters, get will list all documents up to a
        maximum of 100. Basically what this boils down to is listing all grant
        records for the user-id that is making the request.
      operationId: listDocument
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: pageSize
          in: query
          description: number of records to return (max 100)
          type: integer
          format: int64
        - name: pageNumber
          in: query
          description: page of records (offset is pageSize * (pageNumber-1))
          type: integer
          format: int64
      responses:
        '200':
          description: A list of documents
          schema:
            $ref: '#/definitions/DocumentList'
        "401":
          $ref: '#/responses/NotAuthenticated'
        default:
          $ref: '#/responses/Default500ErrorResponse'
    post:
      summary: create a document
      description: >-
        Creates a new document with the specified text. Then a grant is created
        that points to that document. The grant-id is the id that is returned to
        the user as what appears to be a document-id. This model allows us to
        only ever have one document in existence for any tree of grants. Every
        grant has a pointer to that document, and also has a pointer to its
        parent grant. When a grant is revoked, it is marked as invalid along
        with its entire subtree.
      operationId: createDocument
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Document creation parameters
          required: true
          schema:
            $ref: '#/definitions/DocumentCreateOrModify'
      responses:
        "200":
          description: Document was created successfully
          schema:
            $ref: '#/definitions/DocumentRecord'
        "401":
          $ref: '#/responses/NotAuthenticated'
        default:
          $ref: '#/responses/Default500ErrorResponse'
  /document/{document-id}:
    get:
      summary: Get document by id
      description: >-
        Note that document-id is an alias for grant-id from an external
        perspective, because the actual document-id stored in the database is
        never exposed. I will refer to document-id as grant-id for the rest of
        this explanation to avoid confusion. There are five cases. 1) If a
        grant-id is provided that the user does not have a grant for, that user
        is provided with a grant to that object. A new grant is created and is
        returned. The created grant is a child of the specified grant-id. 2) If
        the grant-id matches the grant owned by the requesting user, the
        document that is specified through grant-id is returned. 3) If the
        parent of the grant owned by the user placing the request is a
        descendant of the the specified grant-id, the grant owned by the user
        will be reparented to the grant-id specified in the URI, and a redirect
        to the user-owned grant will be issued. 4) If the grant-id is a grant
        that is a descendant of a grant specified by the user, the user will be
        redirected to their own grant-id. 5) If the user has previously accessed
        the specified grant-id but has had access revoked, a 403 is returned.
      operationId: getDocument
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: document-id
          in: path
          required: true
          type: string
      responses:
        # ugh: https://github.com/OAI/OpenAPI-Specification/issues/270
        "200":
          description: Response contains requested document
          schema:
            $ref: '#/definitions/Document'
        "301":
          description: >-
            A grant has been created and a redirect to the new document is
            returned.
          schema:
            $ref: '#/definitions/Document'
        "301":
          description: >-
            The user grant was reparented higher in the tree to be a child of grant-id, and we now redirect onto the user grant.
          schema:
            $ref: '#/definitions/Document'
        "301":
          description: >-
            The user grant was higher in the tree than the specified grant. Redirect onto user-grant.
          schema:
            $ref: '#/definitions/Document'
        "401":
          $ref: '#/responses/NotAuthenticated'
        "404":
          description: Document not found or access to document has been revoked.
          schema:
            $ref: '#/definitions/Error'
        default:
          $ref: '#/responses/Default500ErrorResponse'
    put:
      summary: Edit document
      description: >-
        The document that a grant references will be resolved by following a
        pointer from the grant to the underlying document. A new document record
        will be generated with an incremented seqno. The most current document
        is the greatest seqno under that ID. That way we do not erase
        information, and can always resolve the edit history of a document.
      operationId: editDocument
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: document-id
          in: path
          required: true
          type: string
        - name: body
          in: body
          description: Parameters for updating a text document
          required: true
          schema:
            $ref: '#/definitions/DocumentCreateOrModify'
      responses:
        "200":
          description: Response contains the updated document
          schema:
            $ref: '#/definitions/Documents'
        "401":
          $ref: '#/responses/NotAuthenticated'
        "404":
          description: >-
            Document not found, or document not authorized for the requesting
            user. This could come about from revocation of credentials, or
            because the user has not done a get on the same path first.
          schema:
            $ref: '#/definitions/Error'
        default:
          $ref: '#/responses/Default500ErrorResponse'
  /grants:
    get:
      summary: List grants
      description: >-
        List of all grants that the user in question has given. Note that if the
        user granted access to a document that the user was in-turn granted
        access to, the grants coming from above the user in question will not be
        listed.
      operationId: listGrants
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: pageSize
          in: query
          description: number of records to return (max 100)
          type: integer
          format: int64
        - name: pageNumber
          in: query
          description: page of records (offset is pageSize * (pageNumber-1))
          type: integer
          format: int64
      responses:
        "200":
          description: >-
            Response contains a list of all grants issued transitively by the user.
          schema:
            $ref: '#/definitions/GrantList'
        "401":
          $ref: '#/responses/NotAuthenticated'
        default:
          $ref: '#/responses/Default500ErrorResponse'
  /grants/{grant-id}:
    patch:
      summary: Reparent a grant to an ancestor
      description: >-
        Reparent a grant to the specified ancestor. This also reparents all of
        the descendant grants of the specified grant along with it. This will
        remove the targeted node from the list of children of the parent of the
        targeted node. The targeted ancestor must be a descendant of a grant
        owned by the user issuing the request (or be equal to the grant owned by
        that user itself). It must also be an ancestor of the targeted node.
      operationId: reparentGrant
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - name: body
          in: body
          description: Reparenting parameters
          required: true
          schema:
            $ref: '#/definitions/ReparentGrant'
      responses:
        "200":
          description: The new heirarchy below the grant owned by the user making the request
          schema:
            $ref: '#/definitions/GrantList'
        "400":
          description: The specified ancestor is not an ancestor of the target node
          schema:
            $ref: '#/definitions/Error'
        "401":
          $ref: '#/responses/NotAuthenticated'
        "400":
          description: >-
            The specified ancestor is not the grant owned by the user issuing
            the request, or the specified ancestor is not a descendant of the
            grant owned by the user making the request.
          schema:
            $ref: '#/definitions/Error'
        default:
          $ref: '#/responses/Default500ErrorResponse'
    delete:
      summary: Revoke a grant
      description: >-
        Revoke the specified grant if it is a decendent of a grant owned by the
        user-id. All descendants of the specified grant will also be revoked.
      operationId: revokeGrant
      parameters:
        - name: grant-id
          in: path
          required: true
          type: string
      responses:
        "204":
          description: Successful deletion
        "401":
          $ref: '#/responses/NotAuthenticated'
        "404":
          description: Not found or not authorized
        default:
          $ref: '#/responses/Default500ErrorResponse'

definitions:
  UserCreate:
    type: object
    properties:
      email:
        type: string
      signup-token:
        type: string
  UserRecord:
    type: object
    properties:
      id:
        type: string
      email:
        type: string
  DocumentCreateOrModify:
    type: object
    properties:
      name:
        type: string
      text:
        type: string
      document-create-token:
        type: string
  Document:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      text:
        type: string
  DocumentList:
    type: object
    properties:
      documents:
        type: array
        items:
          $ref: '#/definitions/Document'
  Grant:
    type: object
    properties:
      grant-id:
        type: string
      parent-id:
        type: string
      user-id:
        type: string
      user-email:
        type: string
  GrantList:
    type: object
    properties:
      grants:
        type: array
        items:
          $ref: '#/definitions/Grant'
  ReparentGrant:
    type: object
    properties:
      ancestor-grant-id:
        type: string
  Error:
    type: object
    properties:
      msg:
        type: string
      code:
        type: integer
        format: int64
      
      
responses:
  Default500ErrorResponse:
    description: An unexpected error occured
    schema:
      $ref: '#/definitions/Error'
  NotAuthenticated:
    description: Client has not yet authenticated with the API.
    schema:
      $ref: '#/definitions/Error'
